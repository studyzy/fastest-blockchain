// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The response message containing the txid
type SendTxResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SendTxResponse) Reset()         { *m = SendTxResponse{} }
func (m *SendTxResponse) String() string { return proto.CompactTextString(m) }
func (*SendTxResponse) ProtoMessage()    {}
func (*SendTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}
func (m *SendTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTxResponse.Merge(m, src)
}
func (m *SendTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendTxResponse proto.InternalMessageInfo

func (m *SendTxResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SendTxResponse)(nil), "main.SendTxResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x93, 0xe2, 0x4e, 0xca, 0xc9,
	0x4f, 0xce, 0x86, 0x08, 0x29, 0x69, 0x71, 0xf1, 0x05, 0xa7, 0xe6, 0xa5, 0x84, 0x54, 0x04, 0xa5,
	0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6,
	0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x46, 0xb5, 0x5c, 0x9c, 0x41, 0x05,
	0xc9, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x42, 0xd6, 0x5c, 0x3c, 0x10, 0x8d, 0xc1, 0x25, 0x45,
	0xa9, 0x89, 0xb9, 0x42, 0x82, 0x7a, 0x20, 0xc3, 0xf5, 0x42, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93,
	0x4b, 0x32, 0xf3, 0xf3, 0xa4, 0x44, 0x20, 0x42, 0xa8, 0xe6, 0x2b, 0x31, 0x68, 0x30, 0x0a, 0x19,
	0x73, 0xb1, 0x41, 0x44, 0x49, 0xd0, 0xe6, 0x24, 0x77, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7,
	0x72, 0x0c, 0x51, 0x60, 0x7f, 0x25, 0xb1, 0x81, 0x7d, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x20, 0xfd, 0x23, 0x07, 0xf1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcServerClient is the client API for RpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcServerClient interface {
	// Sends a transaction by stream
	SendTxStream(ctx context.Context, opts ...grpc.CallOption) (RpcServer_SendTxStreamClient, error)
	//Send one transaction
	SendTx(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*SendTxResponse, error)
}

type rpcServerClient struct {
	cc *grpc.ClientConn
}

func NewRpcServerClient(cc *grpc.ClientConn) RpcServerClient {
	return &rpcServerClient{cc}
}

func (c *rpcServerClient) SendTxStream(ctx context.Context, opts ...grpc.CallOption) (RpcServer_SendTxStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcServer_serviceDesc.Streams[0], "/main.RpcServer/SendTxStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcServerSendTxStreamClient{stream}
	return x, nil
}

type RpcServer_SendTxStreamClient interface {
	Send(*Transaction) error
	CloseAndRecv() (*SendTxResponse, error)
	grpc.ClientStream
}

type rpcServerSendTxStreamClient struct {
	grpc.ClientStream
}

func (x *rpcServerSendTxStreamClient) Send(m *Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcServerSendTxStreamClient) CloseAndRecv() (*SendTxResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendTxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcServerClient) SendTx(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*SendTxResponse, error) {
	out := new(SendTxResponse)
	err := c.cc.Invoke(ctx, "/main.RpcServer/SendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServerServer is the server API for RpcServer service.
type RpcServerServer interface {
	// Sends a transaction by stream
	SendTxStream(RpcServer_SendTxStreamServer) error
	//Send one transaction
	SendTx(context.Context, *Transaction) (*SendTxResponse, error)
}

// UnimplementedRpcServerServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServerServer struct {
}

func (*UnimplementedRpcServerServer) SendTxStream(srv RpcServer_SendTxStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTxStream not implemented")
}
func (*UnimplementedRpcServerServer) SendTx(ctx context.Context, req *Transaction) (*SendTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}

func RegisterRpcServerServer(s *grpc.Server, srv RpcServerServer) {
	s.RegisterService(&_RpcServer_serviceDesc, srv)
}

func _RpcServer_SendTxStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServerServer).SendTxStream(&rpcServerSendTxStreamServer{stream})
}

type RpcServer_SendTxStreamServer interface {
	SendAndClose(*SendTxResponse) error
	Recv() (*Transaction, error)
	grpc.ServerStream
}

type rpcServerSendTxStreamServer struct {
	grpc.ServerStream
}

func (x *rpcServerSendTxStreamServer) SendAndClose(m *SendTxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcServerSendTxStreamServer) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcServer_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RpcServer/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).SendTx(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.RpcServer",
	HandlerType: (*RpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTx",
			Handler:    _RpcServer_SendTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTxStream",
			Handler:       _RpcServer_SendTxStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func (m *SendTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
